<pre>
<font color=#FF0000><i>// Upgraded to Delphi 2009: Sebastian Zierer</i></font>
 
<font color=#FF0000><i>(* ***** BEGIN LICENSE BLOCK *****</i></font>
<font color=#FF0000><i> * Version: MPL 1.1</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * The contents of this file are subject to the Mozilla Public License Version</i></font>
<font color=#FF0000><i> * 1.1 (the &quot;License&quot;); you may not use this file except in compliance with</i></font>
<font color=#FF0000><i> * the License. You may obtain a copy of the License at</i></font>
<font color=#FF0000><i> * http://www.mozilla.org/MPL/</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * Software distributed under the License is distributed on an &quot;AS IS&quot; basis,</i></font>
<font color=#FF0000><i> * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License</i></font>
<font color=#FF0000><i> * for the specific language governing rights and limitations under the</i></font>
<font color=#FF0000><i> * License.</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * The Original Code is TurboPower SysTools</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * The Initial Developer of the Original Code is</i></font>
<font color=#FF0000><i> * TurboPower Software</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * Portions created by the Initial Developer are Copyright (C) 1996-2002</i></font>
<font color=#FF0000><i> * the Initial Developer. All Rights Reserved.</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * Contributor(s):</i></font>
<font color=#FF0000><i> *</i></font>
<font color=#FF0000><i> * ***** END LICENSE BLOCK ***** *)</i></font>
 
<font color=#FF0000><i>{*********************************************************}</i></font>
<font color=#FF0000><i>{* SysTools: StToHTML.pas 4.03                           *}</i></font>
<font color=#FF0000><i>{*********************************************************}</i></font>
<font color=#FF0000><i>{* SysTools: HTML Text Formatter                         *}</i></font>
<font color=#FF0000><i>{*********************************************************}</i></font>
 
<font color=#FF0000><i>{$I StDefine.inc}</i></font>
 
<B>unit</B> StToHTML;
 
<B>interface</B>
 
<B>uses</B>
  SysUtils, Windows,
  Messages, Classes, Graphics, Controls,
  Forms, Dialogs, StStrms, StBase;
 
<B>type</B>
  TStOnProgressEvent = <B>procedure</B>(Sender : TObject; Percent : Word) <B>of</B> <B>object</B>;
 
  TStStreamToHTML = <B>class</B>(TObject)
  <B>protected</B> <font color=#FF0000><i>{private}</i></font>
    <font color=#FF0000><i>{ Private declarations }</i></font>
    FCaseSensitive   : Boolean;
    FCommentMarkers  : TStringList;
    FEmbeddedHTML    : TStringList;
    FInFileSize      : Cardinal;
    FInFixedLineLen  : integer;
    FInLineTermChar  : Char;
    FInLineTerminator: TStLineTerminator;
    FInputStream     : TStream;
    FInSize          : Cardinal;
    FInTextStream    : TStAnsiTextStream;
    FIsCaseSensitive : Boolean;
    FKeywords        : TStringList;
    FOnProgress      : TStOnProgressEvent;
    FOutputStream    : TStream;
    FOutTextStream   : TStAnsiTextStream;
    FPageFooter      : TStringList;
    FPageHeader      : TStringList;
    FStringMarkers   : TStringList;
    FWordDelims      : <B>String</B>;
  <B>protected</B>
    <font color=#FF0000><i>{ Protected declarations }</i></font>
 
    <font color=#FF0000><i>{internal methods}</i></font>
    <B>function</B> ParseBuffer : Boolean;
 
    <B>procedure</B> SetCommentMarkers(Value : TStringList);
    <B>procedure</B> SetEmbeddedHTML(Value : TStringList);
    <B>procedure</B> SetKeywords(Value : TStringList);
    <B>procedure</B> SetPageFooter(Value : TStringList);
    <B>procedure</B> SetPageHeader(Value : TStringList);
    <B>procedure</B> SetStringMarkers(Value : TStringList);
 
  <B>public</B>
    <font color=#FF0000><i>{ Public declarations }</i></font>
 
    <B>property</B> CaseSensitive : Boolean
      read FCaseSensitive
      write FCaseSensitive;
 
    <B>property</B> CommentMarkers : TStringList
      read FCommentMarkers
      write SetCommentMarkers;
 
    <B>property</B> EmbeddedHTML : TStringList
      read FEmbeddedHTML
      write SetEmbeddedHTML;
 
    <B>property</B> InFixedLineLength : integer
      read FInFixedLineLen
      write FInFixedLineLen;
 
    <B>property</B> InLineTermChar : Char
      read FInLineTermChar
      write FInLineTermChar;
 
    <B>property</B> InLineTerminator : TStLineTerminator
      read FInLineTerminator
      write FInLineTerminator;
 
    <B>property</B> InputStream : TStream
      read FInputStream
      write FInputStream;
 
    <B>property</B> Keywords : TStringList
      read FKeywords
      write SetKeywords;
 
    <B>property</B> OnProgress : TStOnProgressEvent
      read FOnProgress
      write FOnProgress;
 
    <B>property</B> OutputStream : TStream
      read FOutputStream
      write FOutputStream;
 
    <B>property</B> PageFooter : TStringList
      read FPageFooter
      write SetPageFooter;
 
    <B>property</B> PageHeader : TStringList
      read FPageHeader
      write SetPageHeader;
 
    <B>property</B> StringMarkers : TStringList
      read FStringMarkers
      write SetStringMarkers;
 
    <B>property</B> WordDelimiters : <B>String</B>
      read FWordDelims
      write FWordDelims;
 
 
    <B>constructor</B> Create;
    <B>destructor</B> Destroy; override;
 
    <B>procedure</B> GenerateHTML;
  <B>end</B>;
 
 
  TStFileToHTML = <B>class</B>(TStComponent)
  <B>protected</B> <font color=#FF0000><i>{private}</i></font>
    <font color=#FF0000><i>{ Private declarations }</i></font>
 
    FCaseSensitive      : Boolean;
    FCommentMarkers     : TStringList;
    FEmbeddedHTML       : TStringList;
    FInFile             : TFileStream;
    FInFileName         : <B>String</B>;
    FInLineLength       : integer;
    FInLineTermChar     : Char;
    FInLineTerminator   : TStLineTerminator;
    FKeywords           : TStringList;
    FOnProgress         : TStOnProgressEvent;
    FOutFile            : TFileStream;
    FOutFileName        : <B>String</B>;
    FPageFooter         : TStringList;
    FPageHeader         : TStringList;
    FStream             : TStStreamToHTML;
    FStringMarkers      : TStringList;
    FWordDelims         : <B>String</B>;
 
  <B>protected</B>
 
    <B>procedure</B> SetCommentMarkers(Value : TStringList);
    <B>procedure</B> SetEmbeddedHTML(Value : TStringList);
    <B>procedure</B> SetKeywords(Value : TStringList);
    <B>procedure</B> SetPageFooter(Value : TStringList);
    <B>procedure</B> SetPageHeader(Value : TStringList);
    <B>procedure</B> SetStringMarkers(Value : TStringList);
 
  <B>public</B>
    <B>constructor</B> Create(AOwner : TComponent); override;
    <B>destructor</B> Destroy; override;
 
    <B>procedure</B> Execute;
 
  published
    <B>property</B> CaseSensitive : Boolean
      read FCaseSensitive
      write FCaseSensitive default False;
 
    <B>property</B> CommentMarkers : TStringList
      read FCommentMarkers
      write SetCommentMarkers;
 
    <B>property</B> EmbeddedHTML : TStringList
      read FEmbeddedHTML
      write SetEmbeddedHTML;
 
    <B>property</B> InFileName : <B>String</B>
      read FInFileName
      write FInFileName;
 
    <B>property</B> InFixedLineLength : integer
      read FInLineLength
      write FInLineLength default 80;
 
    <B>property</B> InLineTermChar : Char
      read FInLineTermChar
      write FInLineTermChar default #10;
 
    <B>property</B> InLineTerminator : TStLineTerminator
      read FInLineTerminator
      write FInLineTerminator default ltCRLF;
 
    <B>property</B> Keywords : TStringList
      read FKeywords
      write SetKeywords;
 
    <B>property</B> OnProgress : TStOnProgressEvent
      read FOnProgress
      write FOnProgress;
 
    <B>property</B> OutFileName : <B>String</B>
      read FOutFileName
      write FOutFileName;
 
    <B>property</B> PageFooter : TStringList
      read FPageFooter
      write SetPageFooter;
 
    <B>property</B> PageHeader : TStringList
      read FPageHeader
      write SetPageHeader;
 
    <B>property</B> StringMarkers : TStringList
      read FStringMarkers
      write SetStringMarkers;
 
    <B>property</B> WordDelimiters : <B>String</B>
      read FWordDelims
      write FWordDelims;
  <B>end</B>;
 
<B>implementation</B>
 
 
<B>uses</B>
  StConst,
  StDict;
 
 
<font color=#FF0000><i>(*****************************************************************************)</i></font>
<font color=#FF0000><i>(*                         TStStreamToHTML Implementation                    *)</i></font>
<font color=#FF0000><i>(*****************************************************************************)</i></font>
 
<B>constructor</B> TStStreamToHTML.Create;
<B>begin</B>
  <B>inherited</B> Create;
 
  FCommentMarkers := TStringList.Create;
  FEmbeddedHTML   := TStringList.Create;
  FKeywords       := TStringList.Create;
  FPageFooter     := TStringList.Create;
  FPageHeader     := TStringList.Create;
  FStringMarkers  := TStringList.Create;
 
  FInputStream := <B>nil</B>;
  FOutputStream := <B>nil</B>;
 
  FInFileSize := 0;
  FWordDelims := <font color=#0000FF>',; .()'</font>;
 
  FInLineTerminator := ltCRLF;  <font color=#FF0000><i>{normal Windows text file terminator}</i></font>
  FInLineTermChar   := #10;
  FInFixedLineLen   := 80;
 
  <B>with</B> FEmbeddedHTML <B>do</B> <B>begin</B>
    Add(<font color=#0000FF>'&quot;=&amp;quot;'</font>);
    Add(<font color=#0000FF>'&amp;=&amp;amp;'</font>);
    Add(<font color=#0000FF>'&lt;=&amp;lt;'</font>);
    Add(<font color=#0000FF>'&gt;=&amp;gt;'</font>);
    Add(<font color=#0000FF>'&iexcl;=&amp;iexcl;'</font>);
    Add(<font color=#0000FF>'&cent;=&amp;cent;'</font>);
    Add(<font color=#0000FF>'&pound;=&amp;pound;'</font>);
    Add(<font color=#0000FF>'&copy;=&amp;copy;'</font>);
    Add(<font color=#0000FF>'&reg;=&amp;reg;'</font>);
    Add(<font color=#0000FF>'&plusmn;=&amp;plusmn;'</font>);
    Add(<font color=#0000FF>'&frac14;=&amp;frac14;'</font>);
    Add(<font color=#0000FF>'&frac12;=&amp;frac12;'</font>);
    Add(<font color=#0000FF>'&frac34;=&amp;frac34;'</font>);
    Add(<font color=#0000FF>'&divide;=&amp;divide;'</font>);
  <B>end</B>;
<B>end</B>;
 
 
<B>destructor</B> TStStreamToHTML.Destroy;
<B>begin</B>
  FCommentMarkers.Free;
  FCommentMarkers := <B>nil</B>;
 
  FEmbeddedHTML.Free;
  FEmbeddedHTML := <B>nil</B>;
 
  FKeywords.Free;
  FKeywords := <B>nil</B>;
 
  FPageFooter.Free;
  FPageFooter := <B>nil</B>;
 
  FPageHeader.Free;
  FPageHeader := <B>nil</B>;
 
  FStringMarkers.Free;
  FStringMarkers := <B>nil</B>;
 
  FInTextStream.Free;
  FInTextStream := <B>nil</B>;
 
  FOutTextStream.Free;
  FOutTextStream := <B>nil</B>;
 
  <B>inherited</B> Destroy;
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.GenerateHTML;
<B>begin</B>
  <B>if</B> <B>not</B> ((Assigned(FInputStream) <B>and</B> (Assigned(FOutputStream)))) <B>then</B>
    RaiseStError(EStToHTMLError, stscBadStream)
  <B>else</B>
    ParseBuffer;
<B>end</B>;
 
 
<B>procedure</B> DisposeString(Data : Pointer); far;
<B>begin</B>
  Dispose(PString(Data));
<B>end</B>;
 
 
<B>function</B> TStStreamToHTML.ParseBuffer : Boolean;
<B>var</B>
  I, J,
  P1,
  P2,
  BRead,
  PC          : Longint;
  CloseStr,
  SStr,
  EStr,
  S,
  VS,
  AStr,
  TmpStr       : <B>String</B>;
  P            : Pointer;
  PS           : PString;
  CommentDict  : TStDictionary;
  HTMLDict     : TStDictionary;
  KeywordsDict : TStDictionary;
  StringDict   : TStDictionary;
  CommentPend  : Boolean;
 
      <B>function</B> ConvertEmbeddedHTML(<B>const</B> Str2 : <B>String</B>) : <B>String</B>;
      <B>var</B>
        L,
        J  : Longint;
        PH : Pointer;
      <B>begin</B>
        Result := <font color=#0000FF>''</font>;
        <font color=#FF0000><i>{avoid memory reallocations}</i></font>
        SetLength(Result, 1024);
        J := 1;
        <B>for</B> L := 1 <B>to</B> Length(Str2) <B>do</B> <B>begin</B>
          <B>if</B> (<B>not</B> HTMLDict.Exists(Str2[L], PH)) <B>then</B> <B>begin</B>
            Result[J] := Str2[L];
            Inc(J);
          <B>end</B> <B>else</B> <B>begin</B>
            Move(<B>String</B>(PH^)[1], Result[J], Length(<B>String</B>(PH^)) * SizeOf(Char));
            Inc(J, Length(<B>String</B>(PH^)));
          <B>end</B>;
        <B>end</B>;
        Dec(J);
        SetLength(Result, J);
      <B>end</B>;
 
      <B>procedure</B> CheckSubString(<B>const</B> Str1 : <B>String</B>);
      <B>var</B>
        S2 : <B>String</B>;
      <B>begin</B>
        <B>if</B> (KeywordsDict.Exists(Str1, P)) <B>then</B> <B>begin</B>
          VS := <B>String</B>(P^);
          S2 := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1)
              + ConvertEmbeddedHTML(Str1)
              + Copy(VS, pos(<font color=#0000FF>';'</font>, VS)+1, Length(VS));
          <B>if</B> (P1 &gt;= Length(Str1)) <B>and</B> (P1 &lt;= Length(TmpStr)) <B>then</B>
            S2 := S2 + ConvertEmbeddedHTML(TmpStr[P1]);
        <B>end</B> <B>else</B> <B>begin</B>
          S2 := ConvertEmbeddedHTML(Str1);
          <B>if</B> (P1 &gt;= Length(Str1)) <B>and</B> (P1 &lt;= Length(TmpStr)) <B>then</B>
            S2 := S2 + ConvertEmbeddedHTML(TmpStr[P1]);
        <B>end</B>;
        S := S + S2;
      <B>end</B>;
 
<B>begin</B>
  <B>if</B> (Length(FWordDelims) = 0) <B>then</B>
    RaiseStError(EStToHTMLError, stscWordDelimiters);
 
  <font color=#FF0000><i>{create Dictionaries for lookups}</i></font>
  CommentDict  := TStDictionary.Create(FCommentMarkers.Count+1);
  KeywordsDict := TStDictionary.Create(FKeywords.Count+1);
  HTMLDict     := TStDictionary.Create(FEmbeddedHTML.Count+1);
  StringDict   := TStDictionary.Create(FStringMarkers.Count+1);
 
  CommentDict.DisposeData  := DisposeString;
  KeywordsDict.DisposeData := DisposeString;
  HTMLDict.DisposeData     := DisposeString;
  StringDict.DisposeData   := DisposeString;
 
  FInTextStream := TStAnsiTextStream.Create(FInputStream);
  FInTextStream.LineTermChar := AnsiChar(FInLineTermChar);
  FInTextStream.LineTerminator := FInLineTerminator;
  FInTextStream.FixedLineLength := FInFixedLineLen;
  FInFileSize := FInTextStream.Size;
 
  FOutTextStream := TStAnsiTextStream.Create(FOutputStream);
  FOutTextStream.LineTermChar := #10;
  FOutTextStream.LineTerminator := ltCRLF;
  FOutTextStream.FixedLineLength := 80;
 
  FInLineTerminator := ltCRLF;  <font color=#FF0000><i>{normal Windows text file terminator}</i></font>
  FInLineTermChar   := #10;
  FInFixedLineLen   := 80;
 
  <B>try</B>
    <B>if</B> (FCaseSensitive) <B>then</B> <B>begin</B>
      CommentDict.Hash  := AnsiHashStr;
      CommentDict.Equal := AnsiCompareStr;
      HTMLDict.Hash     := AnsiHashStr;
      HTMLDict.Equal    := AnsiCompareStr;
      KeywordsDict.Hash := AnsiHashStr;
      KeywordsDict.Equal:= AnsiCompareStr;
      StringDict.Hash   := AnsiHashStr;
      StringDict.Equal  := AnsiCompareStr;
    <B>end</B> <B>else</B> <B>begin</B>
      CommentDict.Hash  := AnsiHashText;
      CommentDict.Equal := AnsiCompareText;
      HTMLDict.Hash     := AnsiHashText;
      HTMLDict.Equal    := AnsiCompareText;
      KeywordsDict.Hash := AnsiHashText;
      KeywordsDict.Equal:= AnsiCompareText;
      StringDict.Hash   := AnsiHashText;
      StringDict.Equal  := AnsiCompareText;
    <B>end</B>;
 
    <font color=#FF0000><i>{Add items from string lists to dictionaries}</i></font>
    <B>for</B> I := 0 <B>to</B> pred(FKeywords.Count) <B>do</B> <B>begin</B>
      <B>if</B> (Length(FKeywords[I]) = 0) <B>then</B>
        continue;
      <B>if</B> (pos(<font color=#0000FF>'='</font>, FKeywords[I]) &gt; 0) <B>then</B> <B>begin</B>
        New(PS);
        S := FKeywords.Names[I];
        PS^ := FKeywords.Values[S];
        <B>if</B> (<B>not</B> KeywordsDict.Exists(S, P)) <B>then</B>
          KeywordsDict.Add(S, PS)
        <B>else</B>
          Dispose(PS);
      <B>end</B> <B>else</B>
        RaiseStError(EStToHTMLError, stscInvalidSLEntry);
    <B>end</B>;
 
    <B>for</B> I := 0 <B>to</B> pred(FStringMarkers.Count) <B>do</B> <B>begin</B>
      <B>if</B> (Length(FStringMarkers[I]) = 0) <B>then</B>
        continue;
      <B>if</B> (pos(<font color=#0000FF>'='</font>, FStringMarkers[I]) &gt; 0) <B>then</B> <B>begin</B>
        New(PS);
        S := FStringMarkers.Names[I];
        PS^ := FStringMarkers.Values[S];
        <B>if</B> (<B>not</B> StringDict.Exists(S, P)) <B>then</B>
          StringDict.Add(S, PS)
        <B>else</B>
          Dispose(PS);
      <B>end</B> <B>else</B>
        RaiseStError(EStToHTMLError, stscInvalidSLEntry);
    <B>end</B>;
 
    <B>for</B> I := 0 <B>to</B> pred(FCommentMarkers.Count) <B>do</B> <B>begin</B>
      <B>if</B> (Length(FCommentMarkers[I]) = 0) <B>then</B>
        continue;
      <B>if</B> (pos(<font color=#0000FF>'='</font>, FCommentMarkers[I]) &gt; 0) <B>then</B> <B>begin</B>
        New(PS);
        S := FCommentMarkers.Names[I];
        <B>if</B> (Length(S) = 1) <B>then</B>
          PS^ := FCommentMarkers.Values[S]
        <B>else</B> <B>begin</B>
          PS^ := <font color=#0000FF>':1'</font> + S[2] + <font color=#0000FF>';'</font> + FCommentMarkers.Values[S];
          S := S[1];
        <B>end</B>;
        <B>if</B> (<B>not</B> CommentDict.Exists(S, P)) <B>then</B>
          CommentDict.Add(S, PS)
        <B>else</B> <B>begin</B>
          AStr := <B>String</B>(P^);
          AStr := AStr + PS^;
          <B>String</B>(P^) := AStr;
          CommentDict.Update(S, P);
          Dispose(PS);
        <B>end</B>;
      <B>end</B> <B>else</B>
        RaiseStError(EStToHTMLError, stscInvalidSLEntry);
    <B>end</B>;
 
    <B>for</B> I := 0 <B>to</B> pred(FEmbeddedHTML.Count) <B>do</B> <B>begin</B>
      <B>if</B> (pos(<font color=#0000FF>'='</font>, FEmbeddedHTML[I]) &gt; 0) <B>then</B> <B>begin</B>
        New(PS);
        S := FEmbeddedHTML.Names[I];
        PS^ := FEmbeddedHTML.Values[S];
        <B>if</B> (<B>not</B> HTMLDict.Exists(S, P)) <B>then</B>
          HTMLDict.Add(S, PS)
        <B>else</B>
          Dispose(PS);
      <B>end</B> <B>else</B>
        RaiseStError(EStToHTMLError, stscInvalidSLEntry);
    <B>end</B>;
 
    BRead := 0;
    <B>if</B> (FPageHeader.Count &gt; 0) <B>then</B> <B>begin</B>
      <B>for</B> I := 0 <B>to</B> pred(FPageHeader.Count) <B>do</B>
        FOutTextStream.WriteLine(FPageHeader[I]);
    <B>end</B>;
    FOutTextStream.WriteLine(<font color=#0000FF>'&lt;pre&gt;'</font>);
    CommentPend := False;
    AStr := <font color=#0000FF>''</font>;
    SStr := <font color=#0000FF>''</font>;
    EStr := <font color=#0000FF>''</font>;
 
    <font color=#FF0000><i>{make sure buffer is at the start}</i></font>
    FInTextStream.Position := 0;
    <B>while</B> <B>not</B> FInTextStream.AtEndOfStream <B>do</B> <B>begin</B>
      TmpStr := FInTextStream.ReadLine;
      Inc(BRead, Length(TmpStr) + Length(FInTextStream.LineTermChar));
      <B>if</B> (FInFileSize &gt; 0) <B>then</B> <B>begin</B>
        PC := Round((BRead / FInFileSize * 100));
        <B>if</B> (Assigned(FOnProgress)) <B>then</B>
          FOnProgress(Self, PC);
      <B>end</B>;
 
      <B>if</B> (TmpStr = <font color=#0000FF>''</font>) <B>then</B> <B>begin</B>
        <B>if</B> (CommentPend) <B>then</B>
          FOutTextStream.WriteLine(EStr)
        <B>else</B>
          FOutTextStream.WriteLine(<font color=#0000FF>' '</font>);
        continue;
      <B>end</B>;
 
      <B>if</B> (CommentPend) <B>then</B>
        S := SStr
      <B>else</B>
        S := <font color=#0000FF>''</font>;
 
      P1 := 1;
      <B>repeat</B>
        <B>if</B> (<B>not</B> CommentPend) <B>and</B> (CommentDict.Exists(TmpStr[P1], P)) <B>then</B> <B>begin</B>
          VS := <B>String</B>(P^);
          <B>if</B> (Copy(VS, 1 , 2) = <font color=#0000FF>':1'</font>) <B>then</B> <B>begin</B>
            <B>while</B> (Copy(VS, 1 , 2) = <font color=#0000FF>':1'</font>) <B>do</B> <B>begin</B>
              System.Delete(VS, 1, 2);
              <B>if</B> (TmpStr[P1+1] = VS[1]) <B>then</B> <B>begin</B>
                System.Delete(VS, 1, 2);
                CloseStr := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1);
                System.Delete(VS, 1, pos(<font color=#0000FF>';'</font>, VS));
                SStr := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1);
                System.Delete(VS, 1, pos(<font color=#0000FF>';'</font>, VS));
                J := pos(<font color=#0000FF>':1'</font>, VS);
                <B>if</B> (J = 0) <B>then</B>
                  EStr := Copy(VS, pos(<font color=#0000FF>';'</font>, VS)+1, Length(VS))
                <B>else</B> <B>begin</B>
                  EStr := Copy(VS, 1, J-1);
                  System.Delete(VS, 1, J+2);
                <B>end</B>;
 
                <B>if</B> (CloseStr = <font color=#0000FF>''</font>) <B>then</B> <B>begin</B>
                  S := S + SStr;
                  AStr := Copy(TmpStr, P1, Length(TmpStr));
                  CheckSubString(AStr);
                  S := S + EStr;
                  CloseStr := <font color=#0000FF>''</font>;
                  SStr := <font color=#0000FF>''</font>;
                  EStr := <font color=#0000FF>''</font>;
                  TmpStr := <font color=#0000FF>''</font>;
                  continue;
                <B>end</B> <B>else</B> <B>begin</B>
                  I := pos(CloseStr, TmpStr);
                  <B>if</B> (I = 0) <B>then</B> <B>begin</B>
                    CommentPend := True;
                    S := SStr + S;
                  <B>end</B> <B>else</B> <B>begin</B>
                    S := S + SStr;
                    AStr := Copy(TmpStr, P1, I-P1+Length(CloseStr));
                    CheckSubstring(AStr);
                    S := S + EStr;
                    System.Delete(TmpStr, P1, I-P1+Length(CloseStr));
                  <B>end</B>;
                <B>end</B>;
              <B>end</B> <B>else</B> <B>begin</B>
                J := pos(<font color=#0000FF>':1'</font>, VS);
                <B>if</B> (J &gt; 0) <B>then</B>
                  System.Delete(VS, 1, J-1);
              <B>end</B>;
            <B>end</B>;
          <B>end</B> <B>else</B> <B>begin</B>
            <font color=#FF0000><i>{is it really the beginning of a comment?}</i></font>
            CloseStr := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1);
            System.Delete(VS, 1, pos(<font color=#0000FF>';'</font>, VS));
            SStr := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1);
            EStr := Copy(VS, pos(<font color=#0000FF>';'</font>, VS)+1, Length(VS));
            I := pos(CloseStr, TmpStr);
            <B>if</B> (I &gt; 0) <B>and</B> (I &gt; P1) <B>then</B> <B>begin</B>
              <font color=#FF0000><i>{ending marker found}</i></font>
              CommentPend := False;
              S := S + SStr;
              AStr := Copy(TmpStr, P1, I-P1+Length(CloseStr));
              CheckSubstring(AStr);
              S := S + EStr;
              System.Delete(TmpStr, P1, I-P1+Length(CloseStr));
              P1 := 1;
              CloseStr := <font color=#0000FF>''</font>;
              SStr := <font color=#0000FF>''</font>;
              EStr := <font color=#0000FF>''</font>;
              <B>if</B> (TmpStr = <font color=#0000FF>''</font>) <B>then</B>
                continue;
            <B>end</B> <B>else</B> <B>begin</B>  <font color=#FF0000><i>{1}</i></font>
              CommentPend := True;
              S := S + SStr;
              <B>if</B> (Length(TmpStr) &gt; 1) <B>then</B> <B>begin</B>
                AStr := Copy(TmpStr, P1, Length(TmpStr));
                CheckSubstring(AStr);
              <B>end</B> <B>else</B>
                S := S + TmpStr;
              S := S + EStr;
              TmpStr := <font color=#0000FF>''</font>;
              continue;
            <B>end</B>;
          <B>end</B>;
        <B>end</B>;
 
        <B>if</B> (CommentPend) <B>then</B> <B>begin</B>
          I := pos(CloseStr, TmpStr);
          <B>if</B> (I &lt; 1) <B>then</B> <B>begin</B>
            AStr := Copy(TmpStr, P1, Length(TmpStr));
            CheckSubstring(AStr);
            S := S + EStr;
            TmpStr := <font color=#0000FF>''</font>;
            continue;
          <B>end</B> <B>else</B> <B>begin</B> <font color=#FF0000><i>{2}</i></font>
            CommentPend := False;
            <B>if</B> (Length(TmpStr) &gt; 1) <B>then</B> <B>begin</B>
              AStr := Copy(TmpStr, P1, I-P1+Length(CloseStr));
              CheckSubstring(AStr);
            <B>end</B> <B>else</B>
              S := S + TmpStr;
            S := S + EStr;
            System.Delete(TmpStr, P1, I-P1+Length(CloseStr));
            CloseStr := <font color=#0000FF>''</font>;
            SStr := <font color=#0000FF>''</font>;
            EStr := <font color=#0000FF>''</font>;
            <B>if</B> (TmpStr = <font color=#0000FF>''</font>) <B>then</B>
              continue
            <B>else</B>
              P1 := 1;
          <B>end</B>;
        <B>end</B> <B>else</B> <B>begin</B>
          CloseStr := <font color=#0000FF>''</font>;
          SStr := <font color=#0000FF>''</font>;
          EStr := <font color=#0000FF>''</font>;
        <B>end</B>;
 
        <B>if</B> (TmpStr = <font color=#0000FF>''</font>) <B>then</B>
          continue;
 
        P := <B>nil</B>;
        <B>while</B> (P1 &lt;= Length(TmpStr)) <B>and</B> (pos(TmpStr[P1], FWordDelims) = 0) <B>and</B>
              (<B>not</B> StringDict.Exists(TmpStr[P1], P)) <B>do</B>
          Inc(P1);
        <B>if</B> (Assigned(P)) <B>then</B> <B>begin</B>
          P2 := P1+1;
          VS := <B>String</B>(P^);
          CloseStr := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1);
          System.Delete(VS, 1, pos(<font color=#0000FF>';'</font>, VS));
          SStr := Copy(VS, 1, pos(<font color=#0000FF>';'</font>, VS)-1);
          System.Delete(VS, 1, pos(<font color=#0000FF>';'</font>, VS));
          EStr := Copy(VS, pos(<font color=#0000FF>';'</font>, VS)+1, Length(VS));
 
          <B>while</B> (TmpStr[P2] &lt;&gt; CloseStr) <B>and</B> (P2 &lt;= Length(TmpStr)) <B>do</B>
            Inc(P2);
          S := S + SStr;
          AStr := Copy(TmpStr, P1, P2-P1+1);
          CheckSubString(AStr);
          S := S + EStr;
 
          System.Delete(TmpStr, P1, P2);
          <B>if</B> (TmpStr = <font color=#0000FF>''</font>) <B>then</B>
            continue
          <B>else</B>
            P1 := 1;
          P := <B>nil</B>;
        <B>end</B> <B>else</B> <B>if</B> (P1 &lt;= Length(TmpStr)) <B>and</B> (pos(TmpStr[P1],  FWordDelims) &gt; 0) <B>then</B> <B>begin</B>
          <B>if</B> (P1 = 1) <B>then</B> <B>begin</B>
            S := S + ConvertEmbeddedHTML(TmpStr[1]);
            System.Delete(TmpStr, 1, 1);
            P1 := 1;
          <B>end</B> <B>else</B> <B>begin</B>
            AStr := Copy(TmpStr, 1, P1-1);
            <B>if</B> (Length(AStr) &gt; 0) <B>then</B>
              CheckSubstring(AStr);
            System.Delete(TmpStr, 1, P1);
            P1 := 1;
          <B>end</B>;
        <B>end</B> <B>else</B> <B>begin</B>
          AStr := TmpStr;
          CheckSubString(AStr);
          TmpStr := <font color=#0000FF>''</font>;
        <B>end</B>;
      <B>until</B> (Length(TmpStr) = 0);
      FOutTextStream.WriteLine(S);
    <B>end</B>;
    <B>if</B> (Assigned(FOnProgress)) <B>then</B>
      FOnProgress(Self, 0);
 
    Result := True;
    FOutTextStream.WriteLine(<font color=#0000FF>'&lt;/pre&gt;'</font>);
    <B>if</B> (FPageFooter.Count &gt; 0) <B>then</B> <B>begin</B>
      <B>for</B> I := 0 <B>to</B> pred(FPageFooter.Count) <B>do</B>
        FOutTextStream.WriteLine(FPageFooter[I]);
    <B>end</B>;
  <B>finally</B>
    CommentDict.Free;
    HTMLDict.Free;
    KeywordsDict.Free;
    StringDict.Free;
 
    FInTextStream.Free;
    FInTextStream := <B>nil</B>;
 
    FOutTextStream.Free;
    FOutTextStream := <B>nil</B>;
  <B>end</B>;
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.SetCommentMarkers(Value : TStringList);
<B>begin</B>
  FCommentMarkers.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.SetEmbeddedHTML(Value : TStringList);
<B>begin</B>
  FEmbeddedHTML.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.SetKeywords(Value : TStringList);
<B>begin</B>
  FKeywords.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.SetPageFooter(Value : TStringList);
<B>begin</B>
  FPageFooter.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.SetPageHeader(Value : TStringList);
<B>begin</B>
  FPageHeader.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStStreamToHTML.SetStringMarkers(Value : TStringList);
<B>begin</B>
  FStringMarkers.Assign(Value);
<B>end</B>;
 
 
 
<font color=#FF0000><i>(*****************************************************************************)</i></font>
<font color=#FF0000><i>(*                         TStFileToHTML Implementation                      *)</i></font>
<font color=#FF0000><i>(*****************************************************************************)</i></font>
 
 
<B>constructor</B> TStFileToHTML.Create(AOwner : TComponent);
<B>begin</B>
  <B>inherited</B> Create(AOwner);
 
  FCommentMarkers := TStringList.Create;
  FEmbeddedHTML   := TStringList.Create;
  FKeywords       := TStringList.Create;
  FPageFooter     := TStringList.Create;
  FPageHeader     := TStringList.Create;
  FStringMarkers  := TStringList.Create;
 
  FWordDelims := <font color=#0000FF>',; .()'</font>;
 
  FInLineTerminator := ltCRLF;
  FInLineTermChar   := #10;
  FInLineLength     := 80;
 
  <B>with</B> FEmbeddedHTML <B>do</B> <B>begin</B>
    Add(<font color=#0000FF>'&quot;=&amp;quot;'</font>);
    Add(<font color=#0000FF>'&amp;=&amp;amp;'</font>);
    Add(<font color=#0000FF>'&lt;=&amp;lt;'</font>);
    Add(<font color=#0000FF>'&gt;=&amp;gt;'</font>);
    Add(<font color=#0000FF>'&iexcl;=&amp;iexcl;'</font>);
    Add(<font color=#0000FF>'&cent;=&amp;cent;'</font>);
    Add(<font color=#0000FF>'&pound;=&amp;pound;'</font>);
    Add(<font color=#0000FF>'&copy;=&amp;copy;'</font>);
    Add(<font color=#0000FF>'&reg;=&amp;reg;'</font>);
    Add(<font color=#0000FF>'&plusmn;=&amp;plusmn;'</font>);
    Add(<font color=#0000FF>'&frac14;=&amp;frac14;'</font>);
    Add(<font color=#0000FF>'&frac12;=&amp;frac12;'</font>);
    Add(<font color=#0000FF>'&frac34;=&amp;frac34;'</font>);
    Add(<font color=#0000FF>'&divide;=&amp;divide;'</font>);
  <B>end</B>;
<B>end</B>;
 
 
<B>destructor</B> TStFileToHTML.Destroy;
<B>begin</B>
  FCommentMarkers.Free;
  FCommentMarkers := <B>nil</B>;
 
  FEmbeddedHTML.Free;
  FEmbeddedHTML := <B>nil</B>;
 
  FKeywords.Free;
  FKeywords := <B>nil</B>;
 
  FPageFooter.Free;
  FPageFooter := <B>nil</B>;
 
  FPageHeader.Free;
  FPageHeader := <B>nil</B>;
 
  FStringMarkers.Free;
  FStringMarkers := <B>nil</B>;
 
  FInFile.Free;
  FInFile := <B>nil</B>;
 
  FOutFile.Free;
  FOutFile := <B>nil</B>;
 
  FStream.Free;
  FStream := <B>nil</B>;
 
  <B>inherited</B> Destroy;
<B>end</B>;
 
 
<B>procedure</B> TStFileToHTML.Execute;
<B>begin</B>
  FStream := TStStreamToHTML.Create;
  <B>try</B>
    <B>if</B> (FInFileName = <font color=#0000FF>''</font>) <B>then</B>
      RaiseStError(EStToHTMLError, stscNoInputFile)
    <B>else</B> <B>if</B> (FOutFileName = <font color=#0000FF>''</font>) <B>then</B>
      RaiseStError(EStToHTMLError, stscNoOutputFile)
    <B>else</B> <B>begin</B>
      <B>if</B> (Assigned(FInFile)) <B>then</B>
        FInFile.Free;
      <B>try</B>
        FInFile := TFileStream.Create(FInFileName, fmOpenRead <B>or</B> fmShareDenyWrite);
      <B>except</B>
        RaiseStError(EStToHTMLError, stscInFileError);
        Exit;
      <B>end</B>;
 
      <B>if</B> (Assigned(FOutFile)) <B>then</B>
        FOutFile.Free;
      <B>try</B>
        FOutFile := TFileStream.Create(FOutFileName, fmCreate);
      <B>except</B>
        RaiseStError(EStToHTMLError, stscOutFileError);
        Exit;
      <B>end</B>;
 
      <B>try</B>
        FStream.InputStream       := FInFile;
        FStream.OutputStream      := FOutFile;
        FStream.CaseSensitive     := CaseSensitive;
        FStream.CommentMarkers    := CommentMarkers;
        FStream.EmbeddedHTML      := EmbeddedHTML;
        FStream.InFixedLineLength := InFixedLineLength;
        FStream.InLineTermChar    := InLineTermChar;
        FStream.InLineTerminator  := InLineTerminator;
        FStream.Keywords          := Keywords;
        FStream.OnProgress        := OnProgress;
        FStream.PageFooter        := PageFooter;
        FStream.PageHeader        := PageHeader;
        FStream.StringMarkers     := StringMarkers;
        FStream.WordDelimiters    := WordDelimiters;
 
        FStream.GenerateHTML;
      <B>finally</B>
        FInFile.Free;
        FInFile := <B>nil</B>;
        FOutFile.Free;
        FOutFile := <B>nil</B>;
      <B>end</B>;
    <B>end</B>;
  <B>finally</B>
    FStream.Free;
    FStream := <B>nil</B>;
  <B>end</B>;
<B>end</B>;
 
 
<B>procedure</B> TStFileToHTML.SetCommentMarkers(Value : TStringList);
<B>begin</B>
  FCommentMarkers.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStFileToHTML.SetEmbeddedHTML(Value : TStringList);
<B>begin</B>
  FEmbeddedHTML.Assign(Value);
<B>end</B>;
 
 
 
<B>procedure</B> TStFileToHTML.SetKeywords(Value : TStringList);
<B>begin</B>
  FKeywords.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStFileToHTML.SetPageFooter(Value : TStringList);
<B>begin</B>
  FPageFooter.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStFileToHTML.SetPageHeader(Value : TStringList);
<B>begin</B>
  FPageHeader.Assign(Value);
<B>end</B>;
 
 
<B>procedure</B> TStFileToHTML.SetStringMarkers(Value : TStringList);
<B>begin</B>
  FStringMarkers.Assign(Value);
<B>end</B>;
 
 
<B>end</B>.
</pre>
